package action;import entity.Book;import entity.Log;import javax.management.DynamicMBean;import javax.servlet.ServletException;import javax.servlet.http.*;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;/** * @author admin */public class BookAction extends HttpServlet {    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        doGet(request,response);    }    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {//系统初始化        request.setCharacterEncoding("UTF-8");        response.setContentType("text/html; charset=utf-8");        String action = request.getParameter("action");        System.out.println("action:" + action);        HttpSession session = request.getSession();        String username = (String) session.getAttribute("nowUsername");        //初始化文件        File dir_books = new File("\\data\\books\\");        File dir_user = new File("\\data\\user_books\\");        File f_bookslog = new File("\\data\\books\\bookslog.txt");        File dir_userbooks = new File("\\data\\user_books\\" + username + "\\");        File f_userbooks_log = new File("\\data\\user_books\\" + username + "\\userbookslog.txt");  System.out.println(dir_books.getAbsolutePath());        System.out.println(dir_user.getAbsolutePath());        if (!dir_books.exists()) {            dir_books.mkdirs();        }        if (!dir_user.exists()) {            dir_user.mkdirs();        }        if (!dir_userbooks.exists()) {            dir_userbooks.mkdirs();        }        if (!f_bookslog.exists()) {            f_bookslog.createNewFile();        }        if (!f_userbooks_log.exists()) {            f_userbooks_log.createNewFile();        }        System.out.println("初始化成功!");//图书馆数据        //读取目录数据        String[] book_ids = new String[100];        try {            byte[] buf = new byte[2000];            FileInputStream input = new FileInputStream(f_bookslog);            int len = input.read(buf);            String str = "";            for (int i = 0, j = 0, times = 0; j < len; j++) {                if (buf[j] == '\n') {                    str = new String(buf, i, j - i);                    System.out.println("+"+str);                    book_ids[times] = str;                    i = j + 1;                    times++;                }            }        } catch (Exception e) {            System.out.println(e);        }        //读取全部数据至ArrayList<Book> bookList中        ArrayList<Book> bookList = new ArrayList<Book>();        for (int a = 0; book_ids[a] != null; a++) {            System.out.println("id:");            System.out.println(book_ids[a]);            String path = dir_books.getAbsolutePath() +"\\" + book_ids[a] + ".txt";            File f_book = new File(path);            Book book = new Book();            String[] data = new String[3];            try {                byte[] buf = new byte[2000];                FileInputStream input = new FileInputStream(f_book);                int len = input.read(buf);                String str = "";                for (int i = 0, j = 0, times = 0; j < len; j++) {                    if (buf[j] == '\n') {                        str = new String(buf, i, j - i);                        data[times] = str;                        i = j + 1;                        times++;                    }                }            } catch (Exception e) {                System.out.println(e);            }            book.setId(data[0]);            book.setName(data[1]);            book.setPrice(data[2]);            bookList.add(book);            System.out.println(bookList.get(0).getId());        }        //数据传入session        session.setAttribute("bookList", bookList);        System.out.println("图书馆数据传入成功!");//个人数据        //读取用户数据的目录        String[] userbookslog = new String[100];        try {            byte[] buf = new byte[2000];            FileInputStream input = new FileInputStream(f_userbooks_log);            int len = input.read(buf);            String str = "";            for (int i = 0, j = 0, times = 0; j < len; j++) {                if (buf[j] == '\n') {                    str = new String(buf, i, j - i);                    userbookslog[times] = str;                    i = j + 1;                    times++;                }            }        } catch (Exception e) {            System.out.println(e);        }        //读取用户借书信息至Log Loglist        ArrayList<Log> logList = new ArrayList<Log>();        for (int a = 0; userbookslog[a] != null; a++) {            String path = dir_userbooks.getAbsolutePath() + "\\" + userbookslog[a] + ".txt";            System.out.println("Log Loglist"+path);            File f_book = new File(path);            String[] data = new String[3];            Log log = new Log();            try {                byte[] buf = new byte[2000];                FileInputStream input = new FileInputStream(f_book);                int len = input.read(buf);                String str = "";                for (int i = 0, j = 0, times = 0; j < len; j++) {                    if (buf[j] == '\n') {                        str = new String(buf, i, j - i);                        data[times] = str;                        i = j + 1;                        times++;                    }                }            }            catch (Exception e) {                System.out.println(e);            }            log.setBook(searchBook(data[0], bookList));            log.setBorrowTime(data[1]);            log.setDeadline(data[2]);            logList.add(log);        }        //数据传入session        session.setAttribute(username, logList);        System.out.println("个人数据传入成功!");//进行操作        if ("addBook".equals(action)) {            addBook(request, response, session);        } else if ("deleteBook".equals(action)) {            deleteBook(request, response, session);        } else if ("checkAllBooks".equals(action)) {            checkAllBooks(request, response, session);        } else if ("getUser".equals(action)) {            getUser(request, response, session);        } else if ("checkBorrowBooks".equals(action)) {            checkBorrowBooks(request, response, session);        } else if ("returnBook".equals(action)) {            returnBook(request, response, session);        } else if ("borrowBook".equals(action)) {            borrowBook(request, response, session);        }        System.out.println("操作成功!");//更新数据        //图书馆书籍        bookList = (ArrayList<Book>) session.getAttribute("bookList");        String[] strs = new String[3];        System.out.println(bookList.size());        //更新f_bookslog中的数据        String total_log = "";        for(int i = 0; i < bookList.size();i++){            //用换行符连接字符            System.out.println("*");            total_log = total_log + bookList.get(i).getId() + "\n";            System.out.println(total_log);        }        byte[] buf = null;        buf = total_log.getBytes();        //写入文件        FileOutputStream output = new FileOutputStream(f_bookslog);        output.write(buf);        output.close();        //更新dir_books文件中的数据        for(int i = 0; i < bookList.size();i++){            //获取更新数据            strs[0] = bookList.get(i).getId();            strs[1] = bookList.get(i).getName();            strs[2] = bookList.get(i).getPrice();            //用换行符连接字符转成byte型            String total_str = strs[0] + "\n" +  strs[1] + "\n" + strs[2] + "\n";            buf = total_str.getBytes();            //写入文件            String path = dir_books.getAbsolutePath() + "\\" + strs[0] + ".txt";            System.out.println("dir_books"+path);            File f = new File(path);            if (!f.exists()) {                f.createNewFile();            }            output = new FileOutputStream(f);            output.write(buf);            output.close();        }        System.out.println("图书馆数据更新成功!");        //判断是否为普通用户        File dir1 = new File("\\data\\user_details\\");        String path = dir1.getAbsolutePath() + "\\" + username + ".txt";        File f = new File(path);        String[] details = new String[6];        FileInputStream input = new FileInputStream(f);        buf = new byte[200];        int len = input.read(buf);        String str = "";        for(int i = 0,j = 0,times = 0; j < len; j++) {            if(buf[j] == '\n') {                str = new String(buf,i,j-i);                details[times] = str;                i = j + 1;                times++;            }        }        if("commonUser".equals(details[1])){            //个人信息            logList = (ArrayList<Log>) session.getAttribute((String) session.getAttribute("nowUsername"));            //更新f_userbooks_log的数据            total_log = "";            System.out.println(logList.size());            for(int i = 0; i < logList.size();i++){                total_log = total_log + logList.get(i).getBook().getId() + "\n";                System.out.println("userbooks total id" + total_log);            }            System.out.println(total_log);            buf = total_log.getBytes();            //写入文件            output = new FileOutputStream(f_userbooks_log);            output.write(buf);            output.close();            //更新dir_userbooks中的数据            for(int i = 0; i < logList.size();i++){                strs[0] = logList.get(i).getBook().getId();                strs[1] = logList.get(i).getBorrowTime();                strs[2] = logList.get(i).getDeadline();                //用换行符连接字符转成byte型                String total_str = strs[0] + "\n" +  strs[1] + "\n" + strs[2] + "\n";                buf = total_str.getBytes();                //写入文件                path = dir_userbooks.getAbsolutePath() + "\\" + strs[0] + ".txt";                System.out.println("dir_userbooks"+path);                f = new File(path);                if (!f.exists()) {                    f.createNewFile();                }                output = new FileOutputStream(f);                output.write(buf);                output.close();            }            System.out.println("个人数据更新成功!");        }    }    private void borrowBook(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String bookName="";        String id="";        boolean flag=false;        bookName = request.getParameter("bookName");        id=request.getParameter("id");        System.out.println("borrowBook");        System.out.println("bookName:"+bookName);        System.out.println("id:"+id);        ArrayList<Book> bookList = (ArrayList<Book>) session.getAttribute("bookList");        Book book = searchBook(id,bookList);        if(book!=null){            ArrayList<Log> logList = (ArrayList<Log>) session.getAttribute((String) session.getAttribute("nowUsername"));            for (int i = 0; i < logList.size(); i++) {                if(logList.get(i).getBook().getId().equals(id)){                    response.getWriter().write("已经借过此书");                    flag=true;                    break;                }            }            if(flag==false){                Log log=new Log();                log.setBook(book);                Date now =new Date();                SimpleDateFormat format1=new SimpleDateFormat("yyyy年MM月dd日");                log.setBorrowTime(format1.format(now));                System.out.println(log.getBorrowTime());                Date deadline = new Date(now.getTime()+log.getBorrowDay()*24*60*60*1000L);                log.setDeadline(format1.format(deadline));                System.out.println(log.getDeadline());                System.out.println(logList.size());                logList.add(log);                System.out.println(logList.size());                session.setAttribute((String) session.getAttribute("nowUsername"),logList);                response.getWriter().write("借书成功");            }        }else{            response.getWriter().write("未找到此书");        }    }    private void returnBook(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String bookName="";        String id="";        boolean flag=false;        bookName = request.getParameter("bookName");        id=request.getParameter("id");        System.out.println("returnBook");        System.out.println("bookName:"+bookName);        System.out.println("id:"+id);        ArrayList<Log> logList = (ArrayList<Log>) session.getAttribute((String) session.getAttribute("nowUsername"));        for (int i = 0; i < logList.size(); i++) {            if(logList.get(i).getBook().getName().equals(bookName)&&logList.get(i).getBook().getId().equals(id)){                logList.remove(i);                session.setAttribute((String) session.getAttribute("nowUsername"),logList);                flag=true;                break;            }        }        if(flag==true){            response.getWriter().write("成功还书");        }else{            response.getWriter().write("未找到此书");        }    }    private void checkBorrowBooks(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String bookName="";        String id="";        String borrowTime="";        String deadline="";        System.out.println("checkBorrowBooks");        ArrayList<Log> logList= (ArrayList<Log>) session.getAttribute((String) session.getAttribute("nowUsername"));        if(logList.isEmpty()){            response.getWriter().write("你还没有借阅书籍哦！");        }else{            response.getWriter().write("<table><tr><th>书籍名称</th><th>书籍id</th><th>书籍借阅时间</th><th>书籍借阅截止时间</th></tr>");            for (int i = 0; i < logList.size(); i++) {                bookName = logList.get(i).getBook().getName();                id=logList.get(i).getBook().getId();                borrowTime=logList.get(i).getBorrowTime();                deadline=logList.get(i).getDeadline();                response.getWriter().write("<tr><td>"+bookName+"</td><td>"+id+"</td><td>"+borrowTime+"</td><td>"+deadline+"</td></tr>");            }            response.getWriter().write("</table>");        }    }    private void getUser(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String jsonTxt = "{\"username\":";        String username="";        String user="";        username = (String) session.getAttribute("nowUsername");        user=(String) session.getAttribute("user");        jsonTxt  =  jsonTxt +"\"" + username + "\",";        if("commonUser".equals(user)){            jsonTxt = jsonTxt + "\"user\":" + "\"普通用户\"}";        }else{            jsonTxt = jsonTxt + "\"user\":" + "\"管理员\"}";        }        response.getWriter().write(jsonTxt);    }    private void checkAllBooks(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String bookName = "";        String id="";        String price="";        System.out.println("checkAllBooks");        ArrayList<Book> bookList = (ArrayList<Book>) session.getAttribute("bookList");        if(bookList.isEmpty()){            response.getWriter().write("图书馆还没有书籍哦<br>");        }else {            response.getWriter().write("<table><tr><th>书籍名称</th><th>书籍id</th><th>书籍价格</th></tr>");            for (int i = 0; i < bookList.size(); i++) {                bookName=bookList.get(i).getName();                id=bookList.get(i).getId();                price=bookList.get(i).getPrice();                response.getWriter().write("<tr><td>"+bookName+"</td><td>"+id+"</td><td>"+price+"</td></tr>");            }            response.getWriter().write("</table>");        }    }    private void deleteBook(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String bookName = "";        String id="";        boolean flag=false;        bookName = request.getParameter("bookName");        id=request.getParameter("id");        System.out.println("deleteBook");        System.out.println("bookName:"+bookName);        System.out.println("id:"+id);        System.out.println("d1");        ArrayList<Book> bookList = (ArrayList<Book>) session.getAttribute("bookList");        System.out.println("d2");        for (int i = 0; i < bookList.size(); i++) {            if(bookList.get(i).getId().equals(id)&&bookList.get(i).getName().equals(bookName)){                bookList.remove(i);                session.setAttribute("bookList",bookList);                flag= true;                break;            }        }        System.out.println("d3");        if(flag==true){            System.out.println("成功删除书籍");            response.getWriter().write("成功删除书籍");        }else{            System.out.println("未找到此书籍");            response.getWriter().write("未找到此书籍");        }    }    private void addBook(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String bookName = "";        String id="";        String price="";        bookName = request.getParameter("bookName");        id=request.getParameter("id");        price=request.getParameter("price");        System.out.println("addBook");        System.out.println("bookName:"+bookName);        System.out.println("id:"+id);        System.out.println("price:"+price);        System.out.println("1");        ArrayList<Book> bookList = (ArrayList<Book>) session.getAttribute("bookList");        System.out.println(bookList.size());        System.out.println("2");        Book book = searchBook(id,bookList);        System.out.println(book);        if(book!=null){            System.out.println("已存在此书");            response.getWriter().write("已存在此书");        }else{            book=new Book();            book.setId(id);            book.setName(bookName);            book.setPrice(price);            bookList.add(book);            session.setAttribute("bookList",bookList);            System.out.println(bookList.size());            System.out.println("成功添加书籍");            response.getWriter().write("成功添加书籍");        }    }    private Book searchBook(String id, ArrayList<Book> bookList){        for (int i = 0; i < bookList.size(); i++) {            if(bookList.get(i).getId().equals(id)){                return bookList.get(i);            }        }        return null;    }    private void readData(HttpServletRequest request, HttpServletResponse response,HttpSession session) throws IOException {        String bookName = "";        String id="";        String price="";        ArrayList<Book> bookList = (ArrayList<Book>) session.getAttribute("bookList");        System.out.println(bookList);        System.out.println("2");        Book book = searchBook(id,bookList);        System.out.println(book);        if(book!=null){            System.out.println("已存在此书");            response.getWriter().write("已存在此书");        }else{            book=new Book();            book.setId(id);            book.setName(bookName);            book.setPrice(price);            bookList.add(book);            session.setAttribute("bookList",bookList);            System.out.println("成功添加书籍");            response.getWriter().write("成功添加书籍");        }    }}